Section,Stage 0,Stage 1 (Automated),Stage 2 (Human),Stage 3 (Human)
game-8,,,,
SETUP,"(:setup (and
    (exists (?c - curved_wooden_ramp)
        (game-conserved (on floor ?c))
    )
))","In order to set up the game, the following must all be true for every time step:
- there exists an object ?c of type curved_wooden_ramp, such that ?c is on floor","In order to set up the game, put a curved wooden ramp on the floor and make sure it stays there for the duration of the game","Setup: put a curved wooden ramp on the floor and make sure it stays there for the duration of the game

Gameplay: stand in front of the ramp and throw dodgeballs so that they touch the ramp and then land behind it

Terminal: the game ends after you successfully throw a dodgeball in this way

Scoring: you get 3 points if you made a successful throw in one attempt, 2 points if you did so in two attempts, and 1 point if you did so in three or more attempts"
PREFERENCES,"(:constraints (and
    (preference throwOverRamp  ; TODO: does this quanitfy over reasonably?
        (exists (?d - dodgeball ?c - curved_wooden_ramp)
            (then
                (once (and
                    (agent_holds ?d)
                    (< (distance_side ?c front agent) (distance_side ?c back agent))
                ))
                (hold-while
                    (and (not (agent_holds ?d)) (in_motion ?d))
                    (on ?c ?d)
                )
                (once (and
                    (not (in_motion ?d))
                    (< (distance_side ?c back ?d) (distance_side ?c front ?d))
                ))
            )
        )
    )
    (preference throwAttempt
        (exists (?b - dodgeball)
            (then
                (once (agent_holds ?b))
                (hold (and (not (agent_holds ?b)) (in_motion ?b)))
                (once (not (in_motion ?b)))
            )
        )
    )
))","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?c of type curved_wooden_ramp
    -?d of type dodgeball

    This preference is satisfied when:
    - first, there is a state where (the agent is holding ?d) and (the distance between agent and the front of ?c is less than the distance between agent and the back of ?c)
    - next, there is a sequence of one or more states where (it's not the case that the agent is holding ?d) and (?d is in motion) Additionally, during this sequence there is a state where (?d is on ?c) (in that order).
    - finally, there is a state where (it's not the case that ?d is in motion) and (the distance between ?d and the back of ?c is less than the distance between ?d and the front of ?c)

-----Preference 2-----
    The variables required by this preference are:
    -?b of type dodgeball

    This preference is satisfied when:
    - first, there is a state where the agent is holding ?b
    - next, there is a sequence of one or more states where (it's not the case that the agent is holding ?b) and (?b is in motion)
    - finally, there is a state where it's not the case that ?b is in motion","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-first, the agent holds a dodgeball and is standing closer to the front of a curved wooden ramp than the back of the ramp
-next, the agent throws the dodgeball and it touches the ramp during its flight
-finally, the dodgeball stops moving and is closer to the back of the ramp than the front of the ramp

-----Preference 2-----
This preference is satisfied when:
-first, the agent holds a dodgeball
-next, the agent throws the dodgeball
-finally, the dodgeball stops moving",
TERMINAL,"(:terminal (>= (count-once throwOverRamp) 1)
)","The game ends when min(1, the number of times 'Preference 1' has been satisfied) is greater than or equal to 1",The game ends when Preference 1 has been satisfied at least once,
SCORING,"(:scoring (+
    (* 3 (= (count throwAttempt) 1) (count-once throwOverRamp))
    (* 2 (= (count throwAttempt) 2) (count-once throwOverRamp))
    (* (>= (count throwAttempt) 3) (count-once throwOverRamp))
)","At the end of the game, the player's score is the sum of (the product of (3); (the number of times 'Preference 2' has been satisfied is equal to 1); and (min(1, the number of times 'Preference 1' has been satisfied))); (the product of (2); (the number of times 'Preference 2' has been satisfied is equal to 2); and (min(1, the number of times 'Preference 1' has been satisfied))); and (the product of (the number of times 'Preference 2' has been satisfied is greater than or equal to 3) and (min(1, the number of times 'Preference 1' has been satisfied)))","At the end of the game, the player's score is 3 if Preference 1 is satisfied once and Preference 2 is satisfied once; their score is 2 if Preference 1 is satisfied once and Preference 2 is satisfied twice; and their score is 1 if Preference 1 is satisfied once and Preference 2 is satisfied 3 or more times",
game-3,,,,
SETUP,,,,"Gameplay: make buildings out of blocks

Scoring: you get 1 point for every different block used in the largest building at the end of the game"
PREFERENCES,"(:constraints (and
    (forall (?b - building)
        (preference blockInTowerAtEnd (exists (?l - block)
            (at-end (in ?b ?l))
        ))
    )
))","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?b of type building
    -?l of type block

    This preference is satisfied when:
    - in the final game state, ?l is inside of ?b","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a block is used as part of a building",
TERMINAL,,,,
SCORING,"(:scoring (external-forall-maximize
    (count-once-per-objects blockInTowerAtEnd)
))","At the end of the game, the player's score is the maximum value of (the number of times 'Preference 1' has been satisfied with different objects) over all quantifications of ?b (of type building)
","At the end of the game, the player's score is equal to the greatest number of times Preference 1 had been satisfied with different objects within a particular building ",
game-22,,,,
SETUP,"(:setup (and
    (exists (?h - hexagonal_bin) (game-conserved (adjacent bed ?h)))
    (forall (?b - ball) (game-optional (on rug ?b)))
    (game-optional (not (exists (?g - game_object) (on desk ?g))))
))","In order to set up the game, the following must all be true for at least one time step:
- for any object ?b of type ball, ?b is on rug
- it's not the case that there exists an object ?g of type game_object, such that ?g is on desk

and in addition, the following must all be true for every time step:
- there exists an object ?h of type hexagonal_bin, such that bed is adjacent to ?h","In order to set up the game, put every ball on the rug and make sure that there are no objects on the desk. In addition, put a hexagonal bin next to the bed and make sure that it stays there throughout the game","Setup: put every ball on the rug and take every object off of the desk. In addition, put a hexagonal bin next to the bed and make sure that it stays there throughout the game

Gameplay: throw balls into the bin while standing on either the red, yellow, or pink sections of the rug

Terminal: the game ends after you've made at least 8 throw attempts

Scoring: your score at the end of the game depends on the number of successful throws into the bin made with different kinds of balls while standing on differently-colored sections of the rug. While standing on a red section, successful throws with a dodgeball are worth 2 points, throws with a basketball are worth 3 points, and throws with a beachball are worth 4 points. While standing on a pink section, dodgeball throws give 3 points, basketball throws give 4 points, and beachball throws give 5 points. Finally, while standing on a yellow section, dodgeball throws give 4 points, basketball throws give 5 points, and beachball throws give 6 points"
PREFERENCES,"(:constraints (and
    (forall (?b - ball ?x - (either red yellow pink))
        (preference throwBallToBin
            (exists (?h - hexagonal_bin)
                (then
                    (once (and (agent_holds ?b) (on rug agent) (rug_color_under agent ?x)))
                    (hold (and (not (agent_holds ?b)) (in_motion ?b)))
                    (once (and (not (in_motion ?b)) (in ?h ?b)))
                )
            )
        )
    )
    (preference throwAttempt
        (exists (?b - ball)
            (then
                (once (and (agent_holds ?b) (on rug agent)))
                (hold (and (not (agent_holds ?b)) (in_motion ?b)))
                (once (not (in_motion ?b)))
            )
        )
    )
))","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?b of type ball
    -?x of type red, yellow, or pink
    -?h of type hexagonal_bin

    This preference is satisfied when:
    - first, there is a state where (the agent is holding ?b), (agent is on rug), and (the color of the rug under agent is ?x)
    - next, there is a sequence of one or more states where (it's not the case that the agent is holding ?b) and (?b is in motion)
    - finally, there is a state where (it's not the case that ?b is in motion) and (?b is inside of ?h)

-----Preference 2-----
    The variables required by this preference are:
    -?b of type ball

    This preference is satisfied when:
    - first, there is a state where (the agent is holding ?b) and (agent is on rug)
    - next, there is a sequence of one or more states where (it's not the case that the agent is holding ?b) and (?b is in motion)
    - finally, there is a state where it's not the case that ?b is in motion","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-first, the agent holds a ball while standing on a section of the rug that is either red, yellow, or pink
-next, the agent throws the ball
-finally, the ball lands in the bin and stops moving

-----Preference 2-----
This preference is satisfied when:
-first, the agent holds a ball while standing on the rug
-next, the agent throws the ball
-finally, the ball stops moving",
TERMINAL,"(:terminal
    (>= (count throwAttempt) 8)
)",The game ends when the number of times 'Preference 2' has been satisfied is greater than or equal to 8,The game ends when Preference 2 has been satisfied at least 8 times,
SCORING,"(:scoring (+
    (* 2 (count throwBallToBin:dodgeball:red))
    (* 3 (count throwBallToBin:basketball:red))
    (* 4 (count throwBallToBin:beachball:red))
    (* 3 (count throwBallToBin:dodgeball:pink))
    (* 4 (count throwBallToBin:basketball:pink))
    (* 5 (count throwBallToBin:beachball:pink))
    (* 4 (count throwBallToBin:dodgeball:yellow))
    (* 5 (count throwBallToBin:basketball:yellow))
    (* 6 (count throwBallToBin:beachball:yellow))
))","At the end of the game, the player's score is the sum of (the product of (2) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type dodgeball and ?x is bound to an object of type red)); (the product of (3) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type basketball and ?x is bound to an object of type red)); (the product of (4) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type beachball and ?x is bound to an object of type red)); (the product of (3) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type dodgeball and ?x is bound to an object of type pink)); (the product of (4) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type basketball and ?x is bound to an object of type pink)); (the product of (5) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type beachball and ?x is bound to an object of type pink)); (the product of (4) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type dodgeball and ?x is bound to an object of type yellow)); (the product of (5) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type basketball and ?x is bound to an object of type yellow)); and (the product of (6) and (the number of times 'Preference 1' has been satisfied, where ?b is bound to an object of type beachball and ?x is bound to an object of type yellow))","At the end of the game, the player gets 2 points for every successful throw with a dodgeball while standing on a red section, 3 points for every successful throw with a basketball while standing on a red section, and 4 points for every successful throw with a beachball while standing on a red section. The player also gets 3 points for every successful throw with a dodgeball while standing on a pink section, 4 points for every successful throw with a basketball while standing on a pink section, and 5 points for every successful throw with a beachball while standing on a pink section. Finally, the player gets 4 points for every successful throw with a dodgeball while standing on a yellow section, 5 points for every successful throw with a basketball while standing on a yellow section, and 6 points for every successful throw with a beachball while standing on a yellow section",
game-53,,,,
SETUP,,,,"Gameplay: put balls in a bin the corner of the room, put cube blocks on a shelf, and put cellphones / keychains / mugs / credit cards / CDs / watches / alarm blocks in a drawer

Scoring: you get 5 points for each different object put in its designated location at the end of the game"
PREFERENCES,"(:constraints (and
    (preference dodgeballsInPlace
        (exists (?d - dodgeball ?h - hexagonal_bin ?w1 ?w2 - wall)
            (at-end (and (in ?h ?d) (adjacent ?h ?w1) (adjacent ?h ?w2)))
        )
    )
    (preference blocksInPlace
        (exists (?c - cube_block ?s - shelf)
            (at-end (on ?s ?c))
        )
    )
    (preference smallItemsInPlace
        (exists (?o - (either cellphone key_chain mug credit_card cd watch alarm_clock) ?d - drawer)
            (at-end (and
                (in ?d ?o)
            ))
        )
    )
))","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?d of type dodgeball
    -?h of type hexagonal_bin
    -?w1 and ?w2 of type wall

    This preference is satisfied when:
    - in the final game state, (?d is inside of ?h), (?h is adjacent to ?w1), and (?h is adjacent to ?w2)

-----Preference 2-----
    The variables required by this preference are:
    -?c of type cube_block
    -?s of type shelf

    This preference is satisfied when:
    - in the final game state, ?c is on ?s

-----Preference 3-----
    The variables required by this preference are:
    -?o of type cellphone, key_chain, mug, credit_card, cd, watch, or alarm_clock
    -?d of type drawer

    This preference is satisfied when:
    - in the final game state, (?o is inside of ?d)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a dodgeball is in a hexagonal bin and the bin is adjacent to two walls

-----Preference 2-----
This preference is satisfied when:
-at the end of the game, a cube block is on a shelf

-----Preference 3-----
This preference is satisfied when:
-at the end of the game, a cellphone, keychain, mug, credit card, CD, watch, or alarm clock is in a drawer",
TERMINAL,,,,
SCORING,"(:scoring (+
    (* 5 (count-once-per-objects dodgeballsInPlace))
    (* 5 (count-once-per-objects blocksInPlace))
    (* 5 (count-once-per-objects smallItemsInPlace))
))","At the end of the game, the player's score is the sum of (the product of (5) and (the number of times 'Preference 1' has been satisfied with different objects)), (the product of (5) and (the number of times 'Preference 2' has been satisfied with different objects)), and (the product of (5) and (the number of times 'Preference 3' has been satisfied with different objects))","At the end of the game, the player gets 5 points for every different set of objects used to satisfy Preference 1, 5 points for every different set of objects used to satisfy Preference 2, and 5 points for every different set of objects used to satisfy Preference 3",
game-41,,,,
SETUP,"(:setup (and
    (exists (?w1 ?w2 - wall) (and
        (game-conserved (opposite ?w1 ?w2))
        (forall (?b - bridge_block) (game-conserved (and
            (on floor ?b)
            (= (distance ?w1 ?b) (distance ?w2 ?b))
        )))
        (forall (?g - game_object) (game-optional (or
            (same_type ?g bridge_block)
            (> (distance ?w1 ?g) (distance ?w2 ?g))
        )))
    ))
))","In order to set up the game, the following must all be true for every time step:
- there exists objects ?w1 and ?w2 of type wall, such that the following must all be true for at least one time step:
- for any object ?g of type game_object, (?g is of the same type as bridge_block) or (the distance between ?w1 and ?g is greater than the distance between ?w2 and ?g)

and in addition, the following must all be true for every time step:
- ?w1 is opposite ?w2
- for any object ?b of type bridge_block, (?b is on floor) and (the distance between ?w1 and ?b is equal to the distance between ?w2 and ?b)","In order to set up the game, pick two walls opposite of one another. Put every bridge block on the floor so that they are equidistant from both walls and make sure that they stay there throughout the game. Then put every other object closer to one wall than to the other.","Setup: pick two walls opposite of one another and put every bridge block on the floor so that they are equidistant from both walls and make sure that they stay there throughout the game. Then put every other object on one side of the line of bridge blocks

Gameplay: pick up objects that are closer to one wall than another and move them so that they're closer to the other wall

Terminal: the game ends after 30 seconds

Scoring: your score is the number of different objects that you moved from near one wall to another wall"
PREFERENCES,"(:constraints (and
    (forall (?w1 ?w2 - wall)
        (preference objectMovedRoomSide (exists (?g - game_object)
            (then
                (once (and
                    (not (agent_holds ?g))
                    (not (in_motion ?g))
                    (not (same_type ?g bridge_block))
                    (> (distance ?w1 ?g) (distance ?w2 ?g))
                ))
                (hold (or
                    (agent_holds ?g)
                    (in_motion ?g)
                ))
                (once (and
                    (not (in_motion ?g))
                    (< (distance ?w1 ?g) (distance ?w2 ?g))
                ))
            )
        ))
    )
))","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?w1 and ?w2 of type wall
    -?g of type game_object

    This preference is satisfied when:
    - first, there is a state where (it's not the case that the agent is holding ?g), (it's not the case that ?g is in motion), (it's not the case that ?g is of the same type as bridge_block), and (the distance between ?w1 and ?g is greater than the distance between ?w2 and ?g)
    - next, there is a sequence of one or more states where (the agent is holding ?g) or (?g is in motion)
    - finally, there is a state where (it's not the case that ?g is in motion) and (the distance between ?w1 and ?g is less than the distance between ?w2 and ?g)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-first, there's an object which isn't a bridge block, isn't moving or held by the agent, and is closer to one wall than another
-next, the agent picks up and moves the object
-finally, the object stops moving and is closer to the second wall than the first",
TERMINAL,"(:terminal
    (>= (total-time) 30)
)",The game ends when (total-time) is greater than or equal to 30,The game ends after 30 seconds have elapsed,
SCORING,"(:scoring (external-forall-maximize
    (count-once-per-objects objectMovedRoomSide)
))","At the end of the game, the player's score is the maximum value of (the number of times 'Preference 1' has been satisfied with different objects) over all quantifications of ?w1 (of type wall) and ?w2 (of type wall)","At the end of the game, the player's score is equal to the number of times Preference 1 was satisfied with different objects, maximized over the different choices of wall",
MAP-Elites Game 1,,,,
SETUP,,,,"Gameplay: place dodgeballs so that they're either in a hexagonal bin or touching a pillow

Terminal: the game ends after at least one dodgeball is in a hexagonal bin

Scoring: your score is equal to the number of objects in the room that aren't cylindrical blocks for each pair of dodgeball and pillow that are touching"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - dodgeball ?v1 - hexagonal_bin)
        (at-end
          (in ?v1 ?v0)
       )
     )
   )
    (preference preference1
      (exists (?v1 - dodgeball ?v2 - pillow ?v3 - game_object)
        (at-end
          (and
            (not
              (same_type ?v3 cylindrical_block)
           )
            (touch ?v2 ?v1)
         )
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?v0 of type dodgeball
    -?v1 of type hexagonal_bin

    This preference is satisfied when:
    - in the final game state, ?v0 is inside of ?v1

-----Preference 2-----
    The variables required by this preference are:
    -?v1 of type dodgeball
    -?v3 of type game_object
    -?v2 of type pillow

    This preference is satisfied when:
    - in the final game state, (it's not the case that ?v3 is of the same type as cylindrical_block) and (?v2 touches ?v1)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a dodgeball is inside a hexagonal bin

-----Preference 2-----
This preference is satisfied when:
-at the end of the game, a dodgeball is touching a pillow and there's an object in the room that is not a cylindrical block",
TERMINAL,"(:terminal
  (or
    (>= (count preference0) 1)
 )
)",The game ends when (the number of times 'Preference 1' has been satisfied is greater than or equal to 1),The game ends when Preference 1 has been satisfied at least once,
SCORING,"(:scoring
  (count preference1)
)","At the end of the game, the player's score is the number of times 'Preference 2' has been satisfied","At the end of the game, the player's score is the number of times Preference 2 has been satisfied",
MAP-Elites Game 2,,,,
SETUP,"(:setup
  (and
    (exists (?v0 - triangular_ramp)
      (game-conserved
        (and
          (adjacent ?v0 agent)
       )
     )
   )
 )
)","In order to set up the game, the following must all be true for every time step:
- there exists an object ?v0 of type triangular_ramp, such that (?v0 is adjacent to agent)","In order to set up the game, stand next to a triangular ramp and stay there throughout the game","Setup: stand next to a triangular ramp and stay there throughout the game

Gameplay: make it so objects in the room aren't moving and are closer to the rug than the north wall of the room

Terminal: the game ends after at least one object isn't moving and is closer to the rug than the north wall

Scoring: you get 1 point for each different object that meets the conditions"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - game_object)
        (at-end
          (and
            (not
              (in_motion ?v0)
           )
            (< (distance rug ?v0) (distance north_wall ?v0))
         )
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?v0 of type game_object

    This preference is satisfied when:
    - in the final game state, (it's not the case that ?v0 is in motion) and (the distance between rug and ?v0 is less than the distance between north_wall and ?v0)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, an object in the room isn't moving and is closer to the rug than to the north wall of the room",
TERMINAL,"(:terminal
  (or
    (>= (count preference0) 1)
    (>= (count preference0) 1)
 )
)",The game ends when (the number of times 'Preference 1' has been satisfied is greater than or equal to 1) or (the number of times 'Preference 1' has been satisfied is greater than or equal to 1),The game ends when Preference 1 has been satisfied at least once,
SCORING,"(:scoring
  (count preference0)
)","At the end of the game, the player's score is the number of times 'Preference 1' has been satisfied","At the end of the game, the player's score is the number of times Preference 1 has been satisfied",
MAP-Elites Game 3,,,,
SETUP,,,,"Gameplay: move a book without picking it up while a bottom shelf is on top of a doggie bed

Terminal: the game ends after you have moved a book in this way at least 14 times

Scoring: you get 1 point for each time you moved a book in this way"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - book ?v1 - doggie_bed ?v2 - bottom_shelf)
        (then
          (once (and (not (in_motion ?v0)) (on ?v1 ?v2)))
          (hold (and (not (agent_holds ?v0)) (in_motion ?v0)))
          (once (not (in_motion ?v0)))
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?v0 of type book
    -?v2 of type bottom_shelf
    -?v1 of type doggie_bed

    This preference is satisfied when:
    - first, there is a state where (it's not the case that ?v0 is in motion) and (?v2 is on ?v1)
    - next, there is a sequence of one or more states where (it's not the case that the agent is holding ?v0) and (?v0 is in motion)
    - finally, there is a state where it's not the case that ?v0 is in motion","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-first, a book is not in motion and a bottom shelf is on a doggie bed
-next, the books moves without being held by the agent
-finally, the book stops moving",
TERMINAL,"(:terminal
  (>= (count preference0) 14)
)",The game ends when the number of times 'Preference 1' has been satisfied is greater than or equal to 14,The game ends when Preference 1 has been satisfied at least once,
SCORING,"(:scoring
  (count preference0)
)","At the end of the game, the player's score is the number of times 'Preference 1' has been satisfied","At the end of the game, the player's score is the number of times Preference 1 has been satisfied",
MAP-Elites Game 4,,,,
SETUP,"(:setup
  (and
    (exists (?v0 - curved_wooden_ramp)
      (game-conserved
        (and
          (adjacent bed ?v0)
       )
     )
   )
 )
)","In order to set up the game, the following must all be true for every time step:
- there exists an object ?v0 of type curved_wooden_ramp, such that (bed is adjacent to ?v0)","In order to set up the game, put a curved wooden ramp next to the bed and make sure that it stays there throughout the game","Setup: put a curved wooden ramp next to the bed and make sure that it stays there throughout the game

Gameplay: throw balls around the room

Terminal: the game ends when there are at least two objects that are moving and on the bed

Scoring: you get 1 point for each time you threw a ball"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - game_object)
        (at-end
          (and
            (in_motion ?v0)
            (on bed ?v0)
         )
       )
     )
   )
    (preference preference1
      (exists (?v1 - ball)
        (then
          (once (agent_holds ?v1))
          (hold (and (in_motion ?v1) (not (agent_holds ?v1))))
          (once (not (in_motion ?v1)))
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
    The variables required by this preference are:
    -?v0 of type game_object

    This preference is satisfied when:
    - in the final game state, (?v0 is in motion) and (?v0 is on bed)

-----Preference 2-----
    The variables required by this preference are:
    -?v1 of type ball

    This preference is satisfied when:
    - first, there is a state where the agent is holding ?v1
    - next, there is a sequence of one or more states where (?v1 is in motion) and (it's not the case that the agent is holding ?v1)
    - finally, there is a state where it's not the case that ?v1 is in motion","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, an object is in motion and on the bed

-----Preference 2-----
This preference is satisfied when:
-first, the agent holds a ball
-next, the agent throws the ball
-finally, the ball stops moving",
TERMINAL,"(:terminal
  (or
    (>= (count preference0) 2)
 )
)",The game ends when (the number of times 'Preference 1' has been satisfied is greater than or equal to 2),The game ends when Preference 1 has been satisfied at least twice,
SCORING,"(:scoring
  (count preference1)
)","At the end of the game, the player's score is the number of times 'Preference 2' has been satisfied","At the end of the game, the player's score is the number of times Preference 2 has been satisfied",
"New (2024-01) MAP-Elites Game 1 [key (1, 1, 3, 0, 0, 0, 1, 0, 0, 1, 0, 0) ]",,,,
SETUP,,,,
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - block ?v1 - cube_block ?v2 - cube_block ?v3 - flat_block_gray)
        (at-end
          (and
            (on ?v2 ?v0)
            (on ?v3 ?v2)
            (on ?v1 ?v2)
         )
       )
     )
   )
    (preference preference1
      (exists (?v0 - dodgeball)
        (at-end
          (on rug ?v0)
       )
     )
   )
    (preference preference2
      (exists (?v0 - (either key_chain cd) ?v2 - hexagonal_bin)
        (at-end
          (in ?v2 ?v0)
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
The variables required by this preference are:
-?v0 of type block
-?v1 and ?v2 of type cube_block
-?v3 of type flat_block_gray

This preference is satisfied when:
- in the final game state, (?v0 is on ?v2), (?v2 is on ?v3), and (?v2 is on ?v1)

-----Preference 2-----
The variables required by this preference are:
-?v0 of type dodgeball

This preference is satisfied when:
- in the final game state, ?v0 is on rug

-----Preference 3-----
The variables required by this preference are:
-?v2 of type hexagonal_bin
-?v0 of type key_chain or cd

This preference is satisfied when:
- in the final game state, ?v0 is inside of ?v2","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a block is on top of a cube block, which is on top of another cube block and a flat gray block

-----Preference 2-----
This preference is satisfied when:
-at the end of the game, a dodgeball is on the rug

-----Preference 3-----
This preference is satisfied when:
-at the end of the game, a key chain or CD is inside of a hexagonal bin","Gameplay: stack blocks and move objects around the room

Scoring: you get one point for every stack consisting of a block on top of a cube block which is on top of both another cube block and a flat gray block. You also get one point for every key chain or CD inside a hexagonal bin, and you lose 6 points for every dodgeball on the rug"
TERMINAL,,,,
SCORING,"(:scoring
  (+ (* -6 (count preference1) (count preference0))
    (count preference2)
 )
)","At the end of the game, the player's score is the sum of (the product of (-6), (the number of times 'Preference 2' has been satisfied), and (the number of times 'Preference 1' has been satisfied)) and (the number of times 'Preference 3' has been satisfied)","At the end of the game, the player's score is the number of times Preference 1 has been satisfied plus the number of times Preference 3 has been satisfied, minus six times the number of times Preference 2 has been satisfied",
"New (2024-01) MAP-Elites Game 2 [key (1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2)]",,,,
SETUP,"(:setup
  (exists (?v0 - hexagonal_bin)
    (game-conserved
      (near door ?v0)
   )
 )
)","In order to set up the game, the following must all be true for every time step:
- there exists an object ?v0 of type hexagonal_bin, such that door is near ?v0","In order to set up the game, put a hexagonal bin near the door and make sure that it stays there throughout the game","Setup: put a hexagonal bin near the door and keep it there throughout the game

Gameplay: move objects around the room

Scoring: you get 4 points for every object that's not moving and is near the west sliding door, and 1 point for every object that isn't moving and is near the main door"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v1 - game_object)
        (at-end
          (and
            (not
              (in_motion ?v1)
           )
            (near west_sliding_door ?v1)
         )
       )
     )
   )
    (preference preference1
      (exists (?v0 - game_object)
        (at-end
          (and
            (not
              (in_motion ?v0)
           )
            (near door ?v0)
         )
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
The variables required by this preference are:
-?v1 of type game_object

This preference is satisfied when:
- in the final game state, (it's not the case that ?v1 is in motion) and (west_sliding_door is near ?v1)

-----Preference 2-----
The variables required by this preference are:
-?v0 of type game_object

This preference is satisfied when:
- in the final game state, (it's not the case that ?v0 is in motion) and (door is near ?v0)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a game object is not in motion and is near the west sliding door

-----Preference 2-----
This preference is satisfied when:
-at the end of the game, a game object is not in motion and is near the door",
TERMINAL,,,,
SCORING,"(:scoring
  (+ (* 4 (count preference0))
    (count preference1)
 )
)","At the end of the game, the player's score is the sum of (the product of (4) and (the number of times 'Preference 1' has been satisfied)) and (the number of times 'Preference 2' has been satisfied)","At the end of the game, the player's score is four times the number of times Preference 1 was satisfied plus the number of times Preference 2 was satisfied",
"New (2024-01) MAP-Elites Game 3 [key (1, 0, 3, 0, 0, 1, 0, 1, 1, 0, 0, 0)]",,,,
SETUP,"(:setup
  (exists (?v0 - hexagonal_bin)
    (game-conserved
      (near rug ?v0)
   )
 )
)","In order to set up the game, the following must all be true for every time step:
- there exists an object ?v0 of type hexagonal_bin, such that rug is near ?v0","In order to set up the game, put a hexagonal bin near the rug and make sure that it stays there throughout the game.","Setup: put a hexagonal bin near the rug and keep it there throughout the game

Gameplay: move chairs around, pick up and drop cube blocks, and roll golfballs on the rug so they land on the hexagonal bin

Scoring: you get 1 point for every chair on a desk, 1 point for every time you dropped and picked up a cube block, and 1 point for every time you rolled a gofball on a rug and then onto a hexagonal bin"
PREFERENCES,"
(:constraints
  (and
    (preference preference0
      (exists (?v0 - chair ?v1 - desk)
        (at-end
          (and
            (on ?v1 ?v0)
         )
       )
     )
   )
    (preference preference1
      (exists (?v0 - cube_block)
        (then
          (once (agent_holds ?v0))
          (hold (not (agent_holds ?v0)))
          (hold (agent_holds ?v0))
          (once (not (in_motion ?v0)))
       )
     )
   )
    (preference preference2
      (exists (?v0 - hexagonal_bin ?v1 - golfball)
        (then
          (once (agent_holds ?v1))
          (hold (and (not (agent_holds ?v1)) (in_motion ?v1) (touch rug ?v1)))
          (hold (and (in_motion ?v1) (not (agent_holds ?v1))))
          (once (and (not (in_motion ?v1)) (on ?v0 ?v1)))
       )
     )
   )
 )
)
","The preferences of the game are:

-----Preference 1-----
The variables required by this preference are:
-?v0 of type chair
-?v1 of type desk

This preference is satisfied when:
- in the final game state, (?v0 is on ?v1)

-----Preference 2-----
The variables required by this preference are:
-?v0 of type cube_block

This preference is satisfied when:
- first, there is a state where the agent is holding ?v0
- next, there is a sequence of one or more states where it's not the case that the agent is holding ?v0
- next, there is a sequence of one or more states where the agent is holding ?v0
- finally, there is a state where it's not the case that ?v0 is in motion

-----Preference 3-----
The variables required by this preference are:
-?v1 of type golfball
-?v0 of type hexagonal_bin

This preference is satisfied when:
- first, there is a state where the agent is holding ?v1
- next, there is a sequence of one or more states where (it's not the case that the agent is holding ?v1), (?v1 is in motion), and (rug touches ?v1)
- next, there is a sequence of one or more states where (?v1 is in motion) and (it's not the case that the agent is holding ?v1)
- finally, there is a state where (it's not the case that ?v1 is in motion) and (?v1 is on ?v0)","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a chair is on a desk

-----Preference 2-----
This preference is satisfied when:
-first, the agent holds a cube block
-next, the agent drops the cube block
-next, the agent picks up the cube block again
-finally, the cube block stops moving

-----Preference 3-----
This preference is satisfied when:
-first, the agent holds a golfball
-next, the agent rolls the golfball on the rug
-next, the golfball continues to roll
-finally, the gofball stops moving on the hexagonal bin",
TERMINAL,,,,
SCORING,(:scoring (+ (count preference1) (count preference0) (count preference2)) ),"At the end of the game, the player's score is the sum of (the number of times 'Preference 2' has been satisfied), (the number of times 'Preference 1' has been satisfied), and (the number of times 'Preference 3' has been satisfied)","At the end of the game, the player's score is equal to the sum of the number of times Preference 1, Preference 2, and Preference 3 have been satisfied",
"New (2024-01) MAP-Elites Game 4 [key (1, 0, 4, 1, 0, 1, 0, 0, 0, 0, 0, 1)]",,,,
SETUP,"(:setup
  (exists (?v0 - hexagonal_bin)
    (game-conserved
      (near rug ?v0)
   )
 )
)","In order to set up the game, the following must all be true for every time step:
- there exists an object ?v0 of type hexagonal_bin, such that rug is near ?v0","In order to set up the game, put a hexagonal bin near a rug and make sure that it stays there throughout the game","Setup: put a hexagonal bin near the rug and keep it there throughout the game

Gameplay: throw dodgeballs and golfballs and try to throw dodgeballs so they land on a hexagonal bin

Scoring: you get 1 point for every time you threw a dodgeball or golfball, and you get another 1 point for every time you threw a dodgeball so it landed on a hexagonal bin. You lose 1 point for every time you threw a dodgeball so it landed on the rug. Finally, you also get 1 point for every object in the room that's not moving and is near the rug at the end of the game"
PREFERENCES,"(:constraints
  (and
    (preference preference0
      (exists (?v0 - game_object)
        (at-end
          (and
            (not
              (in_motion ?v0)
           )
            (near rug ?v0)
         )
       )
     )
   )
    (preference preference1
      (exists (?v0 - hexagonal_bin ?v1 - dodgeball)
        (then
          (once (agent_holds ?v1))
          (hold (and (not (agent_holds ?v1)) (in_motion ?v1)))
          (once (and (on ?v0 ?v1) (not (in_motion ?v1))))
       )
     )
   )
    (preference preference2
      (exists (?v2 - dodgeball)
        (then
          (once (agent_holds ?v2))
          (hold (and (not (agent_holds ?v2)) (in_motion ?v2)))
          (once (and (not (in_motion ?v2)) (on rug ?v2)))
       )
     )
   )
    (preference preference3
      (exists (?v1 - (either golfball dodgeball))
        (then
          (once (agent_holds ?v1))
          (hold (and (not (agent_holds ?v1)) (in_motion ?v1)))
          (once (not (in_motion ?v1)))
       )
     )
   )
 )
)","The preferences of the game are:

-----Preference 1-----
The variables required by this preference are:
-?v0 of type game_object

This preference is satisfied when:
- in the final game state, (it's not the case that ?v0 is in motion) and (rug is near ?v0)

-----Preference 2-----
The variables required by this preference are:
-?v1 of type dodgeball
-?v0 of type hexagonal_bin

This preference is satisfied when:
- first, there is a state where the agent is holding ?v1
- next, there is a sequence of one or more states where (it's not the case that the agent is holding ?v1) and (?v1 is in motion)
- finally, there is a state where (?v1 is on ?v0) and (it's not the case that ?v1 is in motion)

-----Preference 3-----
The variables required by this preference are:
-?v2 of type dodgeball

This preference is satisfied when:
- first, there is a state where the agent is holding ?v2
- next, there is a sequence of one or more states where (it's not the case that the agent is holding ?v2) and (?v2 is in motion)
- finally, there is a state where (it's not the case that ?v2 is in motion) and (?v2 is on rug)

-----Preference 4-----
The variables required by this preference are:
-?v1 of type golfball or dodgeball

This preference is satisfied when:
- first, there is a state where the agent is holding ?v1
- next, there is a sequence of one or more states where (it's not the case that the agent is holding ?v1) and (?v1 is in motion)
- finally, there is a state where it's not the case that ?v1 is in motion","The preferences of the game are:

-----Preference 1-----
This preference is satisfied when:
-at the end of the game, a game object isn't moving and is near the rug

-----Preference 2-----
This preference is satisfied when:
-first, the agent holds a dodgeball
-next, the agent throws the dodgeball
-finally, the dodgeball stops moving on top of a hexagonal bin

-----Preference 3-----
This preference is satisfied when:
-first, the agent holds a dodgeball
-next, the agent throws the dodgeball
-finally, the dodgeball stops moving on top of the rug

-----Preference 4-----
This preference is satisfied when:
-first, the agent holds a golfball or dodgeball
-next, the agent throws the ball
-finally, the ball stops moving",
TERMINAL,,,,
SCORING,"(:scoring
  (+ (* -1 (count preference2) (count preference1) (count preference0))
    (count preference3)
 )
)","At the end of the game, the player's score is the sum of (the product of (-1), (the number of times 'Preference 3' has been satisfied), (the number of times 'Preference 2' has been satisfied), and (the number of times 'Preference 1' has been satisfied)) and (the number of times 'Preference 4' has been satisfied)","At the end of the game, the player gets 1 point for every time Preference 1, Preference 2, or Preference 4 was satisfied and loses 1 point for every time Preference 3 was satisfied",
